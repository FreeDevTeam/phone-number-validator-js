/**
 * This script loads the geocoder and carrier data from the libphonenumber repository,
 * creates bson files from them and autogenerates the types in src/locales.ts
 */
const fs = require('fs')
const path = require('path')
const readline = require('readline')
const { promisify } = require('util')
const shell = require('shelljs')
const BSON = require('bson')
const readdir = promisify(fs.readdir)

const isDir = (source) => fs.lstatSync(source).isDirectory()

const prepareLocale = async (localePath, locale, type) => {
  const fileRe = /[0-9]+\.txt/
  const files = (await readdir(localePath)).filter((source) =>
    fileRe.test(source)
  )
  const lineRe = /^([0-9]+)\|(.*)$/
  for (let i = 0; i < files.length; ++i) {
    let data = {}
    const file = files[i]
    const countryCode = path.basename(file, '.txt')
    const ccRe = new RegExp(`^${countryCode}`)
    const fileStream = fs.createReadStream(path.join(localePath, file))
    const rl = readline.createInterface({
      input: fileStream,
      crlfDelay: Infinity,
    })
    // Note: we use the crlfDelay option to recognize all instances of CR LF
    // ('\r\n') in input.txt as a single line break.
    for await (const line of rl) {
      let m
      if ((m = lineRe.exec(line)) !== null) {
        const [_, nr, description] = m
        const prefix = nr.replace(ccRe, '')
        data[prefix] = description
      }
    }
    const bData = BSON.serialize(data)
    const dataPath = path.join(__dirname, '/../resources', type, locale)
    shell.exec(`mkdir -p ${dataPath}`)
    const filePath = path.join(dataPath, `${countryCode}.bson`)
    fs.writeFileSync(filePath, bData)
  }
}

const preparePath = async (dataPath, type) => {
  const locales = (await readdir(dataPath)).filter((source) =>
    isDir(path.join(dataPath, source))
  )
  const promises = []
  for (let i = 0; i < locales.length; ++i) {
    const locale = locales[i]
    // if (locale !== 'en') continue
    const localePath = path.join(dataPath, locale)
    promises.push(prepareLocale(localePath, locale, type))
  }
  await Promise.all(promises)
  return { locales }
}

const prepare = async () => {
  if (!shell.which('git')) {
    console.log('Sorry, this script requires git')
    process.exit(1)
  }

  shell.exec('mkdir -p resources/{geocodes,carrier}')
  shell.cd('resources')
  shell.exec('git clone https://github.com/google/libphonenumber')

  console.log('Preparing metadata...')
  const dataBasePath = path.join(
    __dirname,
    '/../resources/libphonenumber/resources'
  )
  let generatedTypes = '/* THIS FILE IS AUTOGENERATED. */\n'

  const geocodingPath = path.join(dataBasePath, 'geocoding')
  const { locales: geoLocales } = await preparePath(geocodingPath, 'geocodes')
  generatedTypes += `export type GeocoderLocale = ${geoLocales
    .map((l) => `'${l}'`)
    .join(' | ')};\n`

  const carrierPath = path.join(dataBasePath, 'carrier')
  const { locales: carrierLocales } = await preparePath(carrierPath, 'carrier')
  generatedTypes += `export type CarrierLocale = ${carrierLocales
    .map((l) => `'${l}'`)
    .join(' | ')};\n`

  console.log('Creating types...')
  fs.writeFileSync(path.join(__dirname, '/../src/locales.ts'), generatedTypes)
}
prepare()
